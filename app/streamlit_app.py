import os
import pathlib
import platform
import subprocess
import sys
from datetime import date, datetime, time

import pandas as pd
import plotly.express as px
import streamlit as st
from dotenv import load_dotenv, set_key

st.set_page_config(page_title="AgroLLM", layout="wide")

# --- –°—Ç–∏–ª–∏ ---
st.markdown(
    """
<style>
    .stTabs [data-baseweb="tab"] {
        font-size: 1.2em;
        color: #2E7D32;
    }
    .stButton > button, .stDownloadButton > button {
        background-color: #2E7D32 !important;
        color: white !important;
        border: none !important;
        border-radius: 6px !important;
        font-size: 1.1em !important;
        padding: 0.5em 1.5em !important;
        margin-bottom: 0.5em;
        transition: background 0.2s;
    }
    .stButton > button:hover, .stDownloadButton > button:hover {
        background-color: #388e3c !important;
        color: #fff !important;
    }
</style>
""",
    unsafe_allow_html=True,
)

# --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ ---
st.markdown(
    """
<h1 style='text-align: center; color: #2E7D32; font-size: 2.8em; margin-bottom: 0.2em;'>–ü—Ä–æ–≥—Ä–µ—Å—Å –ê–≥—Ä–æ</h1>
<p style='text-align: center; color: #555; font-size: 1.3em; margin-top: 0;'>–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –æ –ø–æ–ª–µ–≤—ã—Ö —Ä–∞–±–æ—Ç–∞—Ö</p>
<hr style='margin-bottom: 2em;'>
""",
    unsafe_allow_html=True,
)

# --- –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
script_path = pathlib.Path(__file__).resolve()
script_dir = script_path.parent
base_dir = script_dir.parent
DATA_DIR = base_dir / "data"
env_path = base_dir / ".env"
load_dotenv(env_path)

yandex_key = os.getenv("YANDEX_API_KEY")
yandex_folder = os.getenv("YANDEX_FOLDER_ID")
chat_name = os.getenv("CHAT_NAME")

# --- –í–∫–ª–∞–¥–∫–∏ ---
tabs = st.tabs(
    [
        "üìù –†—É—á–Ω–æ–π –æ—Ç—á—ë—Ç",
        "‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è",
        "üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è",
        "‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    ]
)

# --- 1. –†—É—á–Ω–æ–π –æ—Ç—á—ë—Ç ---
with tabs[0]:
    st.markdown(
        """
    <h2 style='color:#2E7D32;'>üìù –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ—Ç—á—ë—Ç–∞</h2>
    <p>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –ø–æ–ª—É—á–∏—Ç–µ Excel-–æ—Ç—á—ë—Ç –ø–æ WhatsApp-—á–∞—Ç—É.</p>
    """,
        unsafe_allow_html=True,
    )
    default_manual_date = datetime.now().date()
    manual_date = st.date_input(
        "–î–∞—Ç–∞ –æ—Ç—á—ë—Ç–∞", value=default_manual_date, key="manual_date"
    )
    if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary"):
        try:
            dt_str = f"{manual_date.strftime('%Y-%m-%d')} 00:00"
            date_str = manual_date.strftime("%d-%m-%Y")
            dated_excel = DATA_DIR / f"{date_str}.xlsx"
            chat_json = DATA_DIR / f"chat_messages_{date_str}.json"
            with st.spinner(
                f"–ü–∞—Ä—Å–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏–∑ WhatsApp –∑–∞ {manual_date.strftime('%d.%m.%Y')}..."
            ):
                parser_cmd = [
                    "poetry",
                    "run",
                    "python",
                    str(base_dir / "whatsapp_parser" / "wa_parser.py"),
                    dt_str,
                ]
                result1 = subprocess.run(parser_cmd, capture_output=True, text=True)
                if result1.returncode != 0:
                    st.error(
                        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–æ–æ–±—â–µ–Ω–∏–π WhatsApp. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
                    )
                elif not chat_json.exists():
                    st.warning("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É. –§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω.")
                else:
                    st.success(
                        f"–°–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ñ–∞–π–ª: {chat_json.name}\n–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑..."
                    )
                    model_local = "yandex_gpt_extraction"
                    script = base_dir / "llm_extraction" / f"{model_local}.py"
                    analyzer_cmd = [
                        "python",
                        str(script),
                        "--input",
                        str(chat_json),
                        "--output",
                        str(dated_excel),
                    ]
                    result2 = subprocess.run(
                        analyzer_cmd, capture_output=True, text=True
                    )
                    if result2.returncode != 0:
                        st.error(
                            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ Excel-—Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö."
                        )
                    elif not dated_excel.exists():
                        st.warning(
                            "Excel-—Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
                        )
                    else:
                        st.success(f"Excel-—Ñ–∞–π–ª –≥–æ—Ç–æ–≤: {date_str}.xlsx")
                        with open(dated_excel, "rb") as f:
                            st.download_button(
                                f"–°–∫–∞—á–∞—Ç—å {date_str}.xlsx",
                                f,
                                file_name=f"{date_str}.xlsx",
                                type="primary",
                            )
                        try:
                            df = pd.read_excel(dated_excel)
                            st.dataframe(df, use_container_width=True, hide_index=True)
                        except Exception as e:
                            st.warning(
                                "Excel-—Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ."
                            )
        except Exception as exc:
            st.exception(exc)

# --- 2. –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è ---
with tabs[1]:
    st.markdown(
        """
    <h2 style='color:#2E7D32;'>‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è (–∞–≤—Ç–æ–∑–∞–ø—É—Å–∫)</h2>
    <p>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –æ—Ç—á—ë—Ç–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (—Ç–æ–ª—å–∫–æ –¥–ª—è Windows).</p>
    """,
        unsafe_allow_html=True,
    )
    if platform.system() != "Windows":
        st.info("–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ Windows.")
    else:
        auto_time = st.time_input(
            "–í—Ä–µ–º—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ (—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã)",
            value=time(23, 59),
            key="auto_time",
            step=60,
        )
        enable = st.button("–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫", key="enable_autorun")
        disable = st.button("–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫", key="disable_autorun")
        task_name = "AgroLLM_AutoReport"
        bat_path = str((base_dir / "app" / "run_auto_report.bat").resolve())
        st.markdown(
            f"–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞: <code>{bat_path}</code>",
            unsafe_allow_html=True,
        )
        if enable:
            hour, minute = auto_time.hour, auto_time.minute
            cmd = (
                f'schtasks /Create /F /SC DAILY /TN "{task_name}" '
                f'/TR "{bat_path}" '
                f"/ST {hour:02d}:{minute:02d}"
            )
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            if result.returncode == 0:
                st.success(
                    "–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ó–∞–¥–∞—á–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ Windows."
                )
            else:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞: {result.stderr}")
        if disable:
            cmd = f'schtasks /Delete /F /TN "{task_name}"'
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            if result.returncode == 0:
                st.success(
                    "–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –æ—Ç–∫–ª—é—á—ë–Ω. –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ Windows."
                )
            else:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {result.stderr}")

# --- 3. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ---
with tabs[2]:
    st.markdown(
        """
    <h2 style='color:#2E7D32;'>üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤</h2>
    <p>–ì—Ä–∞—Ñ–∏–∫–∏ –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º –∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç—á—ë—Ç–æ–≤.</p>
    """,
        unsafe_allow_html=True,
    )
    if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º –∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º", value=False):
        try:
            excel_files = [f for f in DATA_DIR.iterdir() if f.suffix == ".xlsx"]
            if excel_files:
                latest_file = max(excel_files, key=lambda x: x.stat().st_mtime)
                df = pd.read_excel(latest_file)
                st.info(f"–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ñ–∞–π–ª—É: {latest_file.name}")
                df = df.dropna(
                    subset=["–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ", "–û–ø–µ—Ä–∞—Ü–∏—è", "–ö—É–ª—å—Ç—É—Ä–∞", "–ó–∞ –¥–µ–Ω—å (–≥–∞)"]
                )
                df = df[df["–ó–∞ –¥–µ–Ω—å (–≥–∞)"].astype(str).str.strip() != ""]
                for podrazdelenie in df["–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"].unique():
                    st.markdown(
                        f"<h4 style='color:#388e3c;'>{podrazdelenie}</h4>",
                        unsafe_allow_html=True,
                    )
                    df_podr = df[df["–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"] == podrazdelenie]
                    for oper in df_podr["–û–ø–µ—Ä–∞—Ü–∏—è"].unique():
                        df_oper = df_podr[df_podr["–û–ø–µ—Ä–∞—Ü–∏—è"] == oper]
                        data = (
                            df_oper.groupby("–ö—É–ª—å—Ç—É—Ä–∞")["–ó–∞ –¥–µ–Ω—å (–≥–∞)"]
                            .apply(lambda x: pd.to_numeric(x, errors="coerce").sum())
                            .reset_index()
                        )
                        fig = px.bar(
                            data,
                            x="–ö—É–ª—å—Ç—É—Ä–∞",
                            y="–ó–∞ –¥–µ–Ω—å (–≥–∞)",
                            title=f"{oper}",
                            labels={"–ó–∞ –¥–µ–Ω—å (–≥–∞)": "–ì–µ–∫—Ç–∞—Ä–æ–≤ –∑–∞ –¥–µ–Ω—å"},
                            color="–ö—É–ª—å—Ç—É—Ä–∞",
                        )
                        st.plotly_chart(fig, use_container_width=True)
        except Exception as e:
            st.warning(f"–û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

# --- 4. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ---
with tabs[3]:
    st.markdown(
        """
    <h2 style='color:#2E7D32;'>‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h2>
    <ul>
        <li>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É <b>üìù –†—É—á–Ω–æ–π –æ—Ç—á—ë—Ç</b>, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –Ω–∞–∂–º–∏—Ç–µ <b>–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑</b>. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∫–∞—á–∞–π—Ç–µ Excel-—Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.</li>
        <li>–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–æ–≤ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É <b>‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è</b>, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏ –≤–∫–ª—é—á–∏—Ç–µ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫.</li>
        <li>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –æ—Ç—á—ë—Ç–∞–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫—É <b>üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è</b>.</li>
        <li>–í—Å–µ –æ—Ç—á—ë—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞–ø–∫—É <b>data/</b> –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∞.</li>
    </ul>
    """,
        unsafe_allow_html=True,
    )

# --- 5. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
with tabs[4]:
    load_dotenv(env_path, override=True)
    chat_name = os.getenv("CHAT_NAME")
    yandex_key = os.getenv("YANDEX_API_KEY")
    yandex_folder = os.getenv("YANDEX_FOLDER_ID")
    st.markdown(
        """
    <h2 style='color:#2E7D32;'>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
    <p>–ò–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.</p>
    """,
        unsafe_allow_html=True,
    )
    chat_name_new = st.text_input(
        "–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ WhatsApp", value=chat_name or "", key="settings_chat_name"
    )
    yandex_key_new = st.text_input(
        "Yandex API Key", value=yandex_key or "", key="settings_yandex_key"
    )
    yandex_folder_new = st.text_input(
        "Yandex Folder ID", value=yandex_folder or "", key="settings_yandex_folder"
    )
    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", type="primary"):
        if not (chat_name_new and yandex_key_new and yandex_folder_new):
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
            st.stop()
        set_key(str(env_path), "CHAT_NAME", chat_name_new)
        set_key(str(env_path), "YANDEX_API_KEY", yandex_key_new)
        set_key(str(env_path), "YANDEX_FOLDER_ID", yandex_folder_new)
        st.success(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!"
        )
        st.stop()
